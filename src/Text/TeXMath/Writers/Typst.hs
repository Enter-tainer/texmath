{-# LANGUAGE GeneralizedNewtypeDeriving, ViewPatterns, GADTs, OverloadedStrings #-}
{-
Copyright (C) 2023 John MacFarlane <jgm@berkeley.edu>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-}

module Text.TeXMath.Writers.Typst (writeTypst) where

import Data.List (transpose)
import Data.Maybe (fromMaybe)
import qualified Data.Map as M
import qualified Data.Text as T
import Text.TeXMath.Types
import qualified Text.TeXMath.Shared as S
import Data.Generics (everywhere, mkT)
import Data.Text (Text)

-- import Debug.Trace
-- tr' x = trace (show x) x

-- | Transforms an expression tree to equivalent Typst
writeTypst :: DisplayType -> [Exp] -> Text
writeTypst dt exprs =
  T.unwords $ map writeExp $ everywhere (mkT $ S.handleDownup dt) exprs

writeExps :: [Exp] -> Text
writeExps = T.intercalate " " . map writeExp

inParens :: Text -> Text
inParens s = "(" <> s <> ")"

inQuotes :: Text -> Text
inQuotes s = "\"" <> s <> "\""

writeExp' :: Exp -> Text
writeExp' (EGrouped es) = "(" <> writeExps es <> ")"
writeExp' e = writeExp e

writeExp :: Exp -> Text
writeExp (ENumber s) = s
writeExp (ESymbol _t s) =
  fromMaybe s $ M.lookup s typstSymbols
writeExp (EIdentifier s) =
  writeExp (ESymbol Ord s)
writeExp (EMathOperator s)
  | s `elem` ["arccos", "arcsin", "arctan", "arg", "cos", "cosh",
              "cot", "ctg", "coth", "csc", "deg", "det", "dim", "exp",
              "gcd", "hom", "mod", "inf", "ker", "lg", "lim", "ln",
              "log", "max", "min", "Pr", "sec", "sin", "sinh", "sup",
              "tan", "tg", "tanh", "liminf", "and", "limsup"]
    = s
  | otherwise = "\"" <> s <> "\""
writeExp (EGrouped es) = writeExps es
writeExp (EFraction _fractype e1 e2) =
  case (e1, e2) of
    (EGrouped _, _) -> "frac(" <> writeExp e1 <> ", " <> writeExp e2 <> ")"
    (_, EGrouped _) -> "frac(" <> writeExp e1 <> ", " <> writeExp e2 <> ")"
    _ -> writeExp e1 <> " / " <> writeExp e2
writeExp (ESub b e1) = writeExp' b <> "_" <> writeExp' e1
writeExp (ESuper b e1) = writeExp' b <> "^" <> writeExp' e1
writeExp (ESubsup b e1 e2) = writeExp' b <> "_" <> writeExp' e1 <>
                                            "^" <> writeExp' e2
writeExp (EOver _convertible b e1) =
  case e1 of
    ESymbol Accent "`" -> "grave" <> inParens (writeExp b)
    ESymbol Accent "´" -> "acute" <> inParens (writeExp b)
    ESymbol Accent "^" -> "hat" <> inParens (writeExp b)
    ESymbol Accent "~" -> "tilde" <> inParens (writeExp b)
    ESymbol Accent "¯" -> "macron" <> inParens (writeExp b)
    ESymbol Accent "˘" -> "breve" <> inParens (writeExp b)
    ESymbol Accent "." -> "dot" <> inParens (writeExp b)
    ESymbol Accent "¨" -> "diaer" <> inParens (writeExp b)
    ESymbol Accent "∘" -> "circle" <> inParens (writeExp b)
    ESymbol Accent "˝" -> "acute.double" <> inParens (writeExp b)
    ESymbol Accent "ˇ" -> "caron" <> inParens (writeExp b)
    ESymbol Accent "→" -> "->" <> inParens (writeExp b)
    ESymbol Accent "←" -> "<-" <> inParens (writeExp b)
    ESymbol TOver "\9182" -> "overbrace(" <> writeExp b <> ")"
    ESymbol TOver "\9140" -> "overbracket(" <> writeExp b <> ")"
    _ -> writeExp' b <> "^" <> writeExp' e1
writeExp (EUnder _convertible b e1) =
  case e1 of
    ESymbol TUnder "\9182" -> "underbrace(" <> writeExp b <> ")"
    ESymbol TUnder "\9140" -> "underbracket(" <> writeExp b <> ")"
    _ -> writeExp' b <> "_" <> writeExp' e1
writeExp (EUnderover convertible b e1 e2) =
  case (e1, e2) of
    (_, ESymbol Accent _) -> writeExp (EUnder convertible (EOver False b e2) e1)
    (_, ESymbol TOver _) -> writeExp (EUnder convertible (EOver False b e2) e1)
    (ESymbol TUnder _, _) -> writeExp (EOver convertible (EUnder False b e1) e2)
    _ -> writeExp' b <> "_" <> writeExp' e1 <> "^" <> writeExp' e2
writeExp (ESqrt e) = "sqrt(" <> writeExp e <> ")"
writeExp (ERoot i e) = "root(" <> writeExp i <> ", " <> writeExp e <> ")"
writeExp (ESpace width) =
  case (floor (width * 18) :: Int) of
    0 -> "space.nws"
    3 -> "space.thin"
    4 -> "space.med"
    6 -> "space.thick"
    18 -> "space.quad"
    n -> "h(" <> tshow (n `div` 18) <> "em)"
writeExp (EText ttype s) =
  case ttype of
       TextNormal -> "upright(" <> inQuotes s <> ")"
       TextItalic -> "italic(" <> inQuotes s <> ")"
       TextBold   -> "bold(" <> inQuotes s <> ")"
       TextBoldItalic -> "bold(italic(" <> inQuotes s <> "))"
       _   -> inQuotes s
writeExp (EStyled ttype es) =
  let contents = writeExps es
  in case ttype of
       TextNormal -> "upright(" <> contents <> ")"
       TextItalic -> "italic(" <> contents <> ")"
       TextBold   -> "bold(" <> contents <> ")"
       TextBoldItalic -> "bold(italic(" <> contents <> "))"
       _   -> contents
writeExp (EBoxed e) = "box(" <> writeExp e <> ")"
writeExp (EPhantom e) = "hide[" <> writeExp e <> "]" -- TODO check
writeExp (EScaled size e) =
  "scale(x=" <> tshow size <> ",y=" <> tshow size <> ")[" <> writeExp e <> "]"
writeExp (EDelimited "(" ")" [Right (EArray _aligns rows)])
  | all (\row -> length row == 1) rows = -- vector
  "vec(" <> mkArray (transpose rows) <> ")"
writeExp (EDelimited "(" ")" [Right (EArray _aligns [[xs],[ys]])]) =
  "binom(" <> writeExps xs <> ", " <> writeExps ys <> ")"
writeExp (EDelimited "(" ")" [Right (EArray _aligns rows)]) =
  "mat(delim: \"(\", " <> mkArray rows <> ")"
writeExp (EDelimited "[" "]" [Right (EArray _aligns rows)]) =
  "mat(delim: \"[\", " <> mkArray rows <> ")"
writeExp (EDelimited "{" "}" [Right (EArray _aligns rows)]) =
  "mat(delim: \"{\", " <> mkArray rows <> ")"
writeExp (EDelimited "|" "|" [Right (EArray _aligns rows)]) =
  "mat(delim: \"|\", " <> mkArray rows <> ")"
writeExp (EDelimited "||" "||" [Right (EArray _aligns rows)]) =
  "mat(delim: \"||\", " <> mkArray rows <> ")"
writeExp (EDelimited open close es) =
  "lr(" <> open <> T.intercalate " " (map fromDelimited es) <> close <> ")"
  where fromDelimited (Left e)  = e
        fromDelimited (Right e) = writeExp e
writeExp (EArray _aligns rows)
  = T.intercalate "\\\n" $ map mkRow rows
     where mkRow = T.intercalate " &" . map writeExps

mkArray :: [[[Exp]]] -> Text
mkArray rows =
  T.intercalate "; " $ map mkRow rows
 where
   mkRow = T.intercalate ", " . map mkCell
   mkCell = writeExps

tshow :: Show a => a -> Text
tshow = T.pack . show

typstSymbols :: M.Map Text Text
typstSymbols = M.fromList
  [ ("𝔸","AA")
  , ("Α","Alpha")
  , ("𝔹","BB")
  , ("Β","Beta")
  , ("ℂ","CC")
  , ("Χ","Chi")
  , ("𝔻","DD")
  , ("Δ","Delta")
  , ("𝔼","EE")
  , ("Ε","Epsilon")
  , ("Η","Eta")
  , ("𝔽","FF")
  , ("𝔾","GG")
  , ("Γ","Gamma")
  , ("ℍ","HH")
  , ("𝕀","II")
  , ("ℑ","Im")
  , ("Ι","Iota")
  , ("𝕁","JJ")
  , ("𝕂","KK")
  , ("Ϗ","Kai")
  , ("Κ","Kappa")
  , ("𝕃","LL")
  , ("Λ","Lambda")
  , ("𝕄","MM")
  , ("Μ","Mu")
  , ("ℕ","NN")
  , ("Ν","Nu")
  , ("𝕆","OO")
  , ("Ω","Omega")
  , ("Ο","Omicron")
  , ("ℙ","PP")
  , ("Φ","Phi")
  , ("Π","Pi")
  , ("Ψ","Psi")
  , ("ℚ","QQ")
  , ("ℝ","RR")
  , ("ℜ","Re")
  , ("Ρ","Rho")
  , ("𝕊","SS")
  , ("Σ","Sigma")
  , ("𝕋","TT")
  , ("Τ","Tau")
  , ("Θ","Theta")
  , ("𝕌","UU")
  , ("Υ","Upsilon")
  , ("𝕍","VV")
  , ("𝕎","WW")
  , ("𝕏","XX")
  , ("Ξ","Xi")
  , ("𝕐","YY")
  , ("ℤ","ZZ")
  , ("Ζ","Zeta")
  , ("´","acute")
  , ("˝","acute.double")
  , ("א","alef")
  , ("α","alpha")
  , ("&","amp")
  , ("⅋","amp.inv")
  , ("∧","and")
  , ("⋀","and.big")
  , ("⋏","and.curly")
  , ("⟑","and.dot")
  , ("⩓","and.double")
  , ("∠","angle")
  , ("〈","angle.l")
  , ("〉","angle.r")
  , ("《","angle.l.double")
  , ("》","angle.r.double")
  , ("⦟","angle.acute")
  , ("∡","angle.arc")
  , ("⦛","angle.arc.rev")
  , ("⦣","angle.rev")
  , ("∟","angle.right")
  , ("\11262","angle.right.rev")
  , ("⊾","angle.right.arc")
  , ("⦝","angle.right.dot")
  , ("⦜","angle.right.sq")
  , ("⟀","angle.spatial")
  , ("∢","angle.spheric")
  , ("⦠","angle.spheric.rev")
  , ("⦡","angle.spheric.top")
  , ("Å","angstrom")
  , ("≈","approx")
  , ("≊","approx.eq")
  , ("≉","approx.not")
  , ("→","arrow.r")
  , ("⟼","arrow.r.long.bar")
  , ("↦","arrow.r.bar")
  , ("⤷","arrow.r.curve")
  , ("⇢","arrow.r.dashed")
  , ("⤑","arrow.r.dotted")
  , ("⇒","arrow.r.double")
  , ("⤇","arrow.r.double.bar")
  , ("⟹","arrow.r.double.long")
  , ("⟾","arrow.r.double.long.bar")
  , ("⇏","arrow.r.double.not")
  , ("➡","arrow.r.filled")
  , ("↪","arrow.r.hook")
  , ("⟶","arrow.r.long")
  , ("⟿","arrow.r.long.squiggly")
  , ("↬","arrow.r.loop")
  , ("↛","arrow.r.not")
  , ("⭆","arrow.r.quad")
  , ("⇝","arrow.r.squiggly")
  , ("⇥","arrow.r.stop")
  , ("⇨","arrow.r.stroked")
  , ("↣","arrow.r.tail")
  , ("⇛","arrow.r.triple")
  , ("⤅","arrow.r.twohead.bar")
  , ("↠","arrow.r.twohead")
  , ("↝","arrow.r.wave")
  , ("←","arrow.l")
  , ("↤","arrow.l.bar")
  , ("⤶","arrow.l.curve")
  , ("⇠","arrow.l.dashed")
  , ("⬸","arrow.l.dotted")
  , ("⇐","arrow.l.double")
  , ("⤆","arrow.l.double.bar")
  , ("⟸","arrow.l.double.long")
  , ("⟽","arrow.l.double.long.bar")
  , ("⇍","arrow.l.double.not")
  , ("⬅","arrow.l.filled")
  , ("↩","arrow.l.hook")
  , ("⟵","arrow.l.long")
  , ("⟻","arrow.l.long.bar")
  , ("⬳","arrow.l.long.squiggly")
  , ("↫","arrow.l.loop")
  , ("↚","arrow.l.not")
  , ("⭅","arrow.l.quad")
  , ("⇜","arrow.l.squiggly")
  , ("⇤","arrow.l.stop")
  , ("⇦","arrow.l.stroked")
  , ("↢","arrow.l.tail")
  , ("⇚","arrow.l.triple")
  , ("⬶","arrow.l.twohead.bar")
  , ("↞","arrow.l.twohead")
  , ("↜","arrow.l.wave")
  , ("↑","arrow.t")
  , ("↥","arrow.t.bar")
  , ("⤴","arrow.t.curve")
  , ("⇡","arrow.t.dashed")
  , ("⇑","arrow.t.double")
  , ("⬆","arrow.t.filled")
  , ("⟰","arrow.t.quad")
  , ("⤒","arrow.t.stop")
  , ("⇧","arrow.t.stroked")
  , ("⤊","arrow.t.triple")
  , ("↟","arrow.t.twohead")
  , ("↓","arrow.b")
  , ("↧","arrow.b.bar")
  , ("⤵","arrow.b.curve")
  , ("⇣","arrow.b.dashed")
  , ("⇓","arrow.b.double")
  , ("⬇","arrow.b.filled")
  , ("⟱","arrow.b.quad")
  , ("⤓","arrow.b.stop")
  , ("⇩","arrow.b.stroked")
  , ("⤋","arrow.b.triple")
  , ("↡","arrow.b.twohead")
  , ("↔","arrow.l.r")
  , ("⇔","arrow.l.r.double")
  , ("⟺","arrow.l.r.double.long")
  , ("⇎","arrow.l.r.double.not")
  , ("⬌","arrow.l.r.filled")
  , ("⟷","arrow.l.r.long")
  , ("↮","arrow.l.r.not")
  , ("⬄","arrow.l.r.stroked")
  , ("↭","arrow.l.r.wave")
  , ("↕","arrow.t.b")
  , ("⇕","arrow.t.b.double")
  , ("⬍","arrow.t.b.filled")
  , ("⇳","arrow.t.b.stroked")
  , ("↗","arrow.tr")
  , ("⇗","arrow.tr.double")
  , ("⬈","arrow.tr.filled")
  , ("⤤","arrow.tr.hook")
  , ("⬀","arrow.tr.stroked")
  , ("↘","arrow.br")
  , ("⇘","arrow.br.double")
  , ("⬊","arrow.br.filled")
  , ("⤥","arrow.br.hook")
  , ("⬂","arrow.br.stroked")
  , ("↖","arrow.tl")
  , ("⇖","arrow.tl.double")
  , ("⬉","arrow.tl.filled")
  , ("⤣","arrow.tl.hook")
  , ("⬁","arrow.tl.stroked")
  , ("↙","arrow.bl")
  , ("⇙","arrow.bl.double")
  , ("⬋","arrow.bl.filled")
  , ("⤦","arrow.bl.hook")
  , ("⬃","arrow.bl.stroked")
  , ("⤡","arrow.tl.br")
  , ("⤢","arrow.tr.bl")
  , ("↺","arrow.ccw")
  , ("↶","arrow.ccw.half")
  , ("↻","arrow.cw")
  , ("↷","arrow.cw.half")
  , ("↯","arrow.zigzag")
  , ("⌃","arrowhead.t")
  , ("⌄","arrowhead.b")
  , ("⇉","arrows.rr")
  , ("⇇","arrows.ll")
  , ("⇈","arrows.tt")
  , ("⇊","arrows.bb")
  , ("⇆","arrows.lr")
  , ("↹","arrows.lr.stop")
  , ("⇄","arrows.rl")
  , ("⇅","arrows.tb")
  , ("⇵","arrows.bt")
  , ("⇶","arrows.rrr")
  , ("⬱","arrows.lll")
  , ("*","ast")
  , ("⁎","ast.low")
  , ("⁑","ast.double")
  , ("⁂","ast.triple")
  , ("﹡","ast.small")
  , ("∗","ast.op")
  , ("⊛","ast.circle")
  , ("⧆","ast.sq")
  , ("@","at")
  , ("\\","backslash")
  , ("⦸","backslash.circle")
  , ("⧷","backslash.not")
  , ("☐","ballot")
  , ("☒","ballot.x")
  , ("|","bar.v")
  , ("‖","bar.v.double")
  , ("⦀","bar.v.triple")
  , ("¦","bar.v.broken")
  , ("⦶","bar.v.circle")
  , ("―","bar.h")
  , ("∵","because")
  , ("ב","bet")
  , ("β","beta")
  , ("ϐ","beta.alt")
  , ("₿","bitcoin")
  , ("⊥","bot")
  , ("{","brace.l")
  , ("}","brace.r")
  , ("⏞","brace.t")
  , ("⏟","brace.b")
  , ("[","bracket.l")
  , ("]","bracket.r")
  , ("⎴","bracket.t")
  , ("⎵","bracket.b")
  , ("˘","breve")
  , ("‸","caret")
  , ("ˇ","caron")
  , ("✓","checkmark")
  , ("🗸","checkmark.light")
  , ("χ","chi")
  , ("○","circle.stroked")
  , ("∘","circle.stroked.tiny")
  , ("⚬","circle.stroked.small")
  , ("◯","circle.stroked.big")
  , ("●","circle.filled")
  , ("⦁","circle.filled.tiny")
  , ("∙","circle.filled.small")
  , ("⬤","circle.filled.big")
  , ("◌","circle.dotted")
  , ("⊚","circle.nested")
  , ("℅","co")
  , (":","colon")
  , ("≔","colon.eq")
  , ("⩴","colon.double.eq")
  , (",","comma")
  , ("∁","complement")
  , ("∘","compose")
  , ("∗","convolve")
  , ("©","copyright")
  , ("℗","copyright.sound")
  , ("†","dagger")
  , ("‡","dagger.double")
  , ("–","dash.en")
  , ("—","dash.em")
  , ("‒","dash.fig")
  , ("〜","dash.wave")
  , ("∹","dash.colon")
  , ("⊝","dash.circle")
  , ("〰","dash.wave.double")
  , ("°","degree")
  , ("℃","degree.c")
  , ("℉","degree.f")
  , ("δ","delta")
  , ("¨","diaer")
  , ("⌀","diameter")
  , ("◇","diamond.stroked")
  , ("⋄","diamond.stroked.small")
  , ("⬦","diamond.stroked.medium")
  , ("⟐","diamond.stroked.dot")
  , ("◆","diamond.filled")
  , ("⬥","diamond.filled.medium")
  , ("⬩","diamond.filled.small")
  , ("∂","diff")
  , ("÷","div")
  , ("⨸","div.circle")
  , ("∣","divides")
  , ("∤","divides.not")
  , ("$","dollar")
  , (".","dot")
  , ("⋅","dot.op")
  , ("·","dot.c")
  , ("⊙","dot.circle")
  , ("⨀","dot.circle.big")
  , ("⊡","dot.square")
  , ("…","dots.h")
  , ("⋯","dots.h.c")
  , ("⋮","dots.v")
  , ("⋱","dots.down")
  , ("⋰","dots.up")
  , ("ℓ","ell")
  , ("⬭","ellipse.stroked.h")
  , ("⬯","ellipse.stroked.v")
  , ("⬬","ellipse.filled.h")
  , ("⬮","ellipse.filled.v")
  , ("ε","epsilon")
  , ("ϵ","epsilon.alt")
  , ("=","eq")
  , ("≛","eq.star")
  , ("⊜","eq.circle")
  , ("≕","eq.colon")
  , ("≝","eq.def")
  , ("≜","eq.delta")
  , ("≚","eq.equi")
  , ("≙","eq.est")
  , ("⋝","eq.gt")
  , ("⋜","eq.lt")
  , ("≞","eq.m")
  , ("≠","eq.not")
  , ("⋞","eq.prec")
  , ("≟","eq.quest")
  , ("﹦","eq.small")
  , ("⋟","eq.succ")
  , ("η","eta")
  , ("€","euro")
  , ("!","excl")
  , ("‼","excl.double")
  , ("¡","excl.inv")
  , ("⁉","excl.quest")
  , ("∃","exists")
  , ("∄","exists.not")
  , ("⧘","fence.l")
  , ("⧚","fence.l.double")
  , ("⧙","fence.r")
  , ("⧛","fence.r.double")
  , ("⦙","fence.dotted")
  , ("❦","floral")
  , ("☙","floral.l")
  , ("❧","floral.r")
  , ("∀","forall")
  , ("₣","franc")
  , ("γ","gamma")
  , ("ג","gimel")
  , ("`","grave")
  , (">","gt")
  , ("⧁","gt.circle")
  , ("⋗","gt.dot")
  , ("≫","gt.double")
  , ("≥","gt.eq")
  , ("⋛","gt.eq.lt")
  , ("≱","gt.eq.not")
  , ("≧","gt.eqq")
  , ("≷","gt.lt")
  , ("≹","gt.lt.not")
  , ("≩","gt.neqq")
  , ("≯","gt.not")
  , ("⋧","gt.ntilde")
  , ("﹥","gt.small")
  , ("≳","gt.tilde")
  , ("≵","gt.tilde.not")
  , ("⋙","gt.triple")
  , ("⫸","gt.triple.nested")
  , ("⇀","harpoon.rt")
  , ("⥛","harpoon.rt.bar")
  , ("⥓","harpoon.rt.stop")
  , ("⇁","harpoon.rb")
  , ("⥟","harpoon.rb.bar")
  , ("⥗","harpoon.rb.stop")
  , ("↼","harpoon.lt")
  , ("⥚","harpoon.lt.bar")
  , ("⥒","harpoon.lt.stop")
  , ("↽","harpoon.lb")
  , ("⥞","harpoon.lb.bar")
  , ("⥖","harpoon.lb.stop")
  , ("↿","harpoon.tl")
  , ("⥠","harpoon.tl.bar")
  , ("⥘","harpoon.tl.stop")
  , ("↾","harpoon.tr")
  , ("⥜","harpoon.tr.bar")
  , ("⥔","harpoon.tr.stop")
  , ("⇃","harpoon.bl")
  , ("⥡","harpoon.bl.bar")
  , ("⥙","harpoon.bl.stop")
  , ("⇂","harpoon.br")
  , ("⥝","harpoon.br.bar")
  , ("⥕","harpoon.br.stop")
  , ("⥎","harpoon.lt.rt")
  , ("⥐","harpoon.lb.rb")
  , ("⥋","harpoon.lb.rt")
  , ("⥊","harpoon.lt.rb")
  , ("⥑","harpoon.tl.bl")
  , ("⥏","harpoon.tr.br")
  , ("⥍","harpoon.tl.br")
  , ("⥌","harpoon.tr.bl")
  , ("⥤","harpoons.rtrb")
  , ("⥥","harpoons.blbr")
  , ("⥯","harpoons.bltr")
  , ("⥧","harpoons.lbrb")
  , ("⥢","harpoons.ltlb")
  , ("⇋","harpoons.ltrb")
  , ("⥦","harpoons.ltrt")
  , ("⥩","harpoons.rblb")
  , ("⇌","harpoons.rtlb")
  , ("⥨","harpoons.rtlt")
  , ("⥮","harpoons.tlbr")
  , ("⥣","harpoons.tltr")
  , ("#","hash")
  , ("^","hat")
  , ("⬡","hexa.stroked")
  , ("⬢","hexa.filled")
  , ("‐","hyph")
  , ("-","hyph.minus")
  , ("‑","hyph.nobreak")
  , ("‧","hyph.point")
  , ("\173","hyph.soft")
  , ("≡","ident")
  , ("≢","ident.not")
  , ("≣","ident.strict")
  , ("∈","in")
  , ("∉","in.not")
  , ("∋","in.rev")
  , ("∌","in.rev.not")
  , ("∍","in.rev.small")
  , ("∊","in.small")
  , ("∞","infinity")
  , ("∫","integral")
  , ("⨗","integral.arrow.hook")
  , ("⨑","integral.ccw")
  , ("∮","integral.cont")
  , ("∳","integral.cont.ccw")
  , ("∲","integral.cont.cw")
  , ("∱","integral.cw")
  , ("∬","integral.double")
  , ("⨌","integral.quad")
  , ("⨙","integral.sect")
  , ("⨖","integral.sq")
  , ("∯","integral.surf")
  , ("⨘","integral.times")
  , ("∭","integral.triple")
  , ("⨚","integral.union")
  , ("∰","integral.vol")
  , ("‽","interrobang")
  , ("ι","iota")
  , ("⨝","join")
  , ("⟖","join.r")
  , ("⟕","join.l")
  , ("⟗","join.l.r")
  , ("ϗ","kai")
  , ("κ","kappa")
  , ("ϰ","kappa.alt")
  , ("K","kelvin")
  , ("λ","lambda")
  , ("₺","lira")
  , ("◊","lozenge.stroked")
  , ("⬫","lozenge.stroked.small")
  , ("⬨","lozenge.stroked.medium")
  , ("⧫","lozenge.filled")
  , ("⬪","lozenge.filled.small")
  , ("⬧","lozenge.filled.medium")
  , ("<","lt")
  , ("⧀","lt.circle")
  , ("⋖","lt.dot")
  , ("≪","lt.double")
  , ("≤","lt.eq")
  , ("⋚","lt.eq.gt")
  , ("≰","lt.eq.not")
  , ("≦","lt.eqq")
  , ("≶","lt.gt")
  , ("≸","lt.gt.not")
  , ("≨","lt.neqq")
  , ("≮","lt.not")
  , ("⋦","lt.ntilde")
  , ("﹤","lt.small")
  , ("≲","lt.tilde")
  , ("≴","lt.tilde.not")
  , ("⋘","lt.triple")
  , ("⫷","lt.triple.nested")
  , ("¯","macron")
  , ("✠","maltese")
  , ("−","minus")
  , ("⊖","minus.circle")
  , ("∸","minus.dot")
  , ("∓","minus.plus")
  , ("⊟","minus.square")
  , ("≂","minus.tilde")
  , ("⨺","minus.triangle")
  , ("⊧","models")
  , ("μ","mu")
  , ("⊸","multimap")
  , ("∇","nabla")
  , ("¬","not")
  , ("🎜","notes.up")
  , ("🎝","notes.down")
  , ("∅","nothing")
  , ("⦰","nothing.rev")
  , ("ν","nu")
  , ("Ω","ohm")
  , ("℧","ohm.inv")
  , ("ω","omega")
  , ("ο","omicron")
  , ("∞","oo")
  , ("∨","or")
  , ("⋁","or.big")
  , ("⋎","or.curly")
  , ("⟇","or.dot")
  , ("⩔","or.double")
  , ("∥","parallel")
  , ("⦷","parallel.circle")
  , ("∦","parallel.not")
  , ("(","paren.l")
  , (")","paren.r")
  , ("⏜","paren.t")
  , ("⏝","paren.b")
  , ("⬠","penta.stroked")
  , ("⬟","penta.filled")
  , ("%","percent")
  , ("‰","permille")
  , ("⟂","perp")
  , ("⦹","perp.circle")
  , ("₱","peso")
  , ("φ","phi")
  , ("ϕ","phi.alt")
  , ("π","pi")
  , ("ϖ","pi.alt")
  , ("¶","pilcrow")
  , ("⁋","pilcrow.rev")
  , ("ℎ","planck")
  , ("ℏ","planck.reduce")
  , ("+","plus")
  , ("⊕","plus.circle")
  , ("⟴","plus.circle.arrow")
  , ("⨁","plus.circle.big")
  , ("∔","plus.dot")
  , ("±","plus.minus")
  , ("﹢","plus.small")
  , ("⊞","plus.square")
  , ("⨹","plus.triangle")
  , ("£","pound")
  , ("≺","prec")
  , ("⪷","prec.approx")
  , ("⪻","prec.double")
  , ("≼","prec.eq")
  , ("⋠","prec.eq.not")
  , ("⪳","prec.eqq")
  , ("⪹","prec.napprox")
  , ("⪵","prec.neqq")
  , ("⊀","prec.not")
  , ("⋨","prec.ntilde")
  , ("≾","prec.tilde")
  , ("′","prime")
  , ("‵","prime.rev")
  , ("″","prime.double")
  , ("‶","prime.double.rev")
  , ("‴","prime.triple")
  , ("‷","prime.triple.rev")
  , ("⁗","prime.quad")
  , ("∏","product")
  , ("∐","product.co")
  , ("∝","prop")
  , ("ψ","psi")
  , ("∎","qed")
  , ("?","quest")
  , ("⁇","quest.double")
  , ("⁈","quest.excl")
  , ("¿","quest.inv")
  , ("\"","quote.double")
  , ("'","quote.single")
  , ("“","quote.l.double")
  , ("‘","quote.l.single")
  , ("”","quote.r.double")
  , ("’","quote.r.single")
  , ("«","quote.angle.l.double")
  , ("‹","quote.angle.l.single")
  , ("»","quote.angle.r.double")
  , ("›","quote.angle.r.single")
  , ("‟","quote.high.double")
  , ("‛","quote.high.single")
  , ("„","quote.low.double")
  , ("‚","quote.low.single")
  , ("∶","ratio")
  , ("▭","rect.stroked.h")
  , ("▯","rect.stroked.v")
  , ("▬","rect.filled.h")
  , ("▮","rect.filled.v")
  , ("※","refmark")
  , ("ρ","rho")
  , ("ϱ","rho.alt")
  , ("₽","ruble")
  , ("₹","rupee")
  , ("∩","sect")
  , ("⩄","sect.and")
  , ("⋂","sect.big")
  , ("⩀","sect.dot")
  , ("⋒","sect.double")
  , ("⊓","sect.sq")
  , ("⨅","sect.sq.big")
  , ("⩎","sect.sq.double")
  , ("§","section")
  , (";","semi")
  , ("⁏","semi.rev")
  , ("℠","servicemark")
  , ("ש","shin")
  , ("σ","sigma")
  , ("/","slash")
  , ("⫽","slash.double")
  , ("⫻","slash.triple")
  , ("⨳","smash")
  , ("s","space")
  , (" ","space.nobreak")
  , (" ","space.en")
  , (" ","space.quad")
  , (" ","space.third")
  , (" ","space.quarter")
  , (" ","space.sixth")
  , (" ","space.med")
  , (" ","space.fig")
  , (" ","space.punct")
  , (" ","space.thin")
  , (" ","space.hair")
  , ("□","square.stroked")
  , ("▫","square.stroked.tiny")
  , ("◽","square.stroked.small")
  , ("◻","square.stroked.medium")
  , ("⬜","square.stroked.big")
  , ("⬚","square.stroked.dotted")
  , ("▢","square.stroked.rounded")
  , ("■","square.filled")
  , ("▪","square.filled.tiny")
  , ("◾","square.filled.small")
  , ("◼","square.filled.medium")
  , ("⬛","square.filled.big")
  , ("⋆","star.op")
  , ("★","star.stroked")
  , ("★","star.filled")
  , ("⊂","subset")
  , ("⪽","subset.dot")
  , ("⋐","subset.double")
  , ("⊆","subset.eq")
  , ("⊈","subset.eq.not")
  , ("⊑","subset.eq.sq")
  , ("⋢","subset.eq.sq.not")
  , ("⊊","subset.neq")
  , ("⊄","subset.not")
  , ("⊏","subset.sq")
  , ("⋤","subset.sq.neq")
  , ("≻","succ")
  , ("⪸","succ.approx")
  , ("⪼","succ.double")
  , ("≽","succ.eq")
  , ("⋡","succ.eq.not")
  , ("⪴","succ.eqq")
  , ("⪺","succ.napprox")
  , ("⪶","succ.neqq")
  , ("⊁","succ.not")
  , ("⋩","succ.ntilde")
  , ("≿","succ.tilde")
  , ("♣","suit.club")
  , ("♦","suit.diamond")
  , ("♥","suit.heart")
  , ("♠","suit.spade")
  , ("∑","sum")
  , ("⨋","sum.integral")
  , ("⊃","supset")
  , ("⪾","supset.dot")
  , ("⋑","supset.double")
  , ("⊇","supset.eq")
  , ("⊉","supset.eq.not")
  , ("⊒","supset.eq.sq")
  , ("⋣","supset.eq.sq.not")
  , ("⊋","supset.neq")
  , ("⊅","supset.not")
  , ("⊐","supset.sq")
  , ("⋥","supset.sq.neq")
  , ("⊢","tack.r")
  , ("⟝","tack.r.long")
  , ("⊣","tack.l")
  , ("⟞","tack.l.long")
  , ("⫞","tack.l.short")
  , ("⊥","tack.t")
  , ("⟘","tack.t.big")
  , ("⫫","tack.t.double")
  , ("⫠","tack.t.short")
  , ("⊤","tack.b")
  , ("⟙","tack.b.big")
  , ("⫪","tack.b.double")
  , ("⫟","tack.b.short")
  , ("⟛","tack.l.r")
  , ("τ","tau")
  , ("∴","therefore")
  , ("θ","theta")
  , ("ϑ","theta.alt")
  , ("~","tilde")
  , ("∼","tilde.op")
  , ("≃","tilde.eq")
  , ("≄","tilde.eq.not")
  , ("⋍","tilde.eq.rev")
  , ("≅","tilde.eqq")
  , ("≇","tilde.eqq.not")
  , ("≆","tilde.neqq")
  , ("≁","tilde.not")
  , ("∽","tilde.rev")
  , ("≌","tilde.rev.eqq")
  , ("≋","tilde.triple")
  , ("×","times")
  , ("⨉","times.big")
  , ("⊗","times.circle")
  , ("⨂","times.circle.big")
  , ("⋇","times.div")
  , ("⋋","times.l")
  , ("⋌","times.r")
  , ("⊠","times.square")
  , ("⨻","times.triangle")
  , ("⊤","top")
  , ("▷","triangle.stroked.r")
  , ("◁","triangle.stroked.l")
  , ("△","triangle.stroked.t")
  , ("▽","triangle.stroked.b")
  , ("◺","triangle.stroked.bl")
  , ("◿","triangle.stroked.br")
  , ("◸","triangle.stroked.tl")
  , ("◹","triangle.stroked.tr")
  , ("▹","triangle.stroked.small.r")
  , ("▿","triangle.stroked.small.b")
  , ("◃","triangle.stroked.small.l")
  , ("▵","triangle.stroked.small.t")
  , ("🛆","triangle.stroked.rounded")
  , ("⟁","triangle.stroked.nested")
  , ("◬","triangle.stroked.dot")
  , ("▶","triangle.filled.r")
  , ("◀","triangle.filled.l")
  , ("▲","triangle.filled.t")
  , ("▼","triangle.filled.b")
  , ("◣","triangle.filled.bl")
  , ("◢","triangle.filled.br")
  , ("◤","triangle.filled.tl")
  , ("◥","triangle.filled.tr")
  , ("▸","triangle.filled.small.r")
  , ("▾","triangle.filled.small.b")
  , ("◂","triangle.filled.small.l")
  , ("▴","triangle.filled.small.t")
  , ("〔","turtle.l")
  , ("〕","turtle.r")
  , ("⏠","turtle.t")
  , ("⏡","turtle.b")
  , ("∪","union")
  , ("⊌","union.arrow")
  , ("⋃","union.big")
  , ("⊍","union.dot")
  , ("⨃","union.dot.big")
  , ("⋓","union.double")
  , ("⩁","union.minus")
  , ("⩅","union.or")
  , ("⊎","union.plus")
  , ("⨄","union.plus.big")
  , ("⊔","union.sq")
  , ("⨆","union.sq.big")
  , ("⩏","union.sq.double")
  , ("υ","upsilon")
  , ("∖","without")
  , ("\8288","wj")
  , ("₩","won")
  , ("≀","wreath")
  , ("ξ","xi")
  , ("¥","yen")
  , ("ζ","zeta")
  , ("\8205","zwj")
  , ("\8204","zwnj")
  , ("\8203","zws") ]
